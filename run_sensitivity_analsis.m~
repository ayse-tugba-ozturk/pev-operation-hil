% This script runs monte carlo simulations with various number of charging
% poles for sensitivity analysis. The number of charging poles and number
% of simulations at each monte carlo simulations are configured in 
% init_params.m. 

par = init_params();
fname = fullfile(pwd,'sensitivity-sim-results', ...
                sprintf('%s_senstivitiy.mat', ...
                datestr(now,'mm_dd_yy_HH_MM')));
monte_results = cell(length(par.sens_analysis.num_poles),1);
i=0;
for num_pole = par.sens_analysis.num_poles
    i = i + 1;
    save(fname);
    par.station.num_poles = num_pole;
    monte_results{i} = run_sim_monte(par);
end


%% TODO: this section will be moved to a function to visualize the simulation results
% Data process
num_monte = length(monte_results);
num_sims = par.monte.num_sims;

num_poles = par.sens_analysis.num_poles;
mean_profits_gap = zeros(num_monte,1);
mean_overstay_gap = zeros(num_monte,1);
for i = 1:length(monte_results)
    num_sims = sim_results{1}.par.monte.num_sims;
    
    % with controller
    overstay_tot = zeros(num_sims,1);
    overstay_mean = zeros(num_sims,1);
    overstay_penalty_mean = zeros(num_sims,1);
    profit = zeros(num_sims,1);
    service_tot = zeros(num_sims,1);
    for n = 1:num_sims
        overstay_mean(n) = mean(sim_results{n}.overstay_duration(sim_results{n}.overstay_duration~=0));
        overstay_penalty_mean(n) = mean(sim_results{n}.control(sim_results{n}.control(:,3)~=0,3));
        overstay_tot(n) = sum(sim_results{n}.overstay_duration);
        profit(n) = sum(sim_results{n}.profit);
        service_tot(n) = sum(sim_results{n}.num_service);
    end

    % without controller
    overstay_tot_base = zeros(num_sims,1);
    overstay_mean_base = zeros(num_sims,1);
    overstay_penalty_mean_base = zeros(num_sims,1);
    profit_base = zeros(num_sims,1);
    service_tot_base = zeros(num_sims,1);
    for n = 1:num_sims
        overstay_mean_base(n) = mean(sim_results_base{n}.overstay_duration(sim_results_base{n}.overstay_duration~=0));
        overstay_penalty_mean_base(n) = mean(sim_results_base{n}.control(sim_results_base{n}.control(:,3)~=0,3));
        overstay_tot_base(n) = sum(sim_results_base{n}.overstay_duration);
        profit_base(n) = sum(sim_results_base{n}.profit);
        service_tot_base(n) = sum(sim_results_base{n}.num_service);
    end
    
    % compute the improvements
    mean_profits_gap(i) = (1-mean(profit)/mean(profit_base))*100;
    mean_overstay_gap(i) = (1-mean(overstay_mean)/mean(overstay_mean_base))*100;
end


%% Visualization
plot()